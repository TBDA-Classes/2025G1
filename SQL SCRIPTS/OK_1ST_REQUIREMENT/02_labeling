-- PURPOSE: Calculate the TOTAL time spent in each of the three states (Idle, Intermediate, Active) for March 18, 2021.
-- METHODOLOGY: Uses COUNT(DISTINCT active variables) per second and thresholds derived from K-Means clustering. Aggregates the final durations.
-- THRESHOLDS: Idle 0-17, Intermediate 18-24, Active 25-MAX.

WITH VariablesPerSecond AS (
    -- 1. Get distinct variables per second for March 18, 2021.
    SELECT
        to_timestamp(floor(CAST(date AS BIGINT) / 1000)) AS timestamp,
        id_var
    FROM
        public.variable_log_float
    WHERE
        to_timestamp(CAST(date AS BIGINT) / 1000) BETWEEN '2021-03-18 06:00:00' AND '2021-03-18 22:00:00'
    GROUP BY
        timestamp, id_var
),
DistinctCountPerSecond AS (
    -- 2. Calculate COUNT(DISTINCT id_var) per second.
    SELECT
        timestamp,
        COUNT(id_var) AS distinct_vars_count
    FROM
        VariablesPerSecond
    GROUP BY
        timestamp
),
InstantaneousStates AS (
    -- 3. Assign state label and number based on K-Means derived thresholds.
    SELECT
        timestamp,
        CASE
            WHEN distinct_vars_count <= 17 THEN 'Idle'           -- K-Means Threshold 1
            WHEN distinct_vars_count <= 24 THEN 'Intermediate'    -- K-Means Threshold 2
            ELSE 'Active'
        END AS state_label,
        -- Assign a numerical state for period calculation (0: Idle, 1: Intermediate, 2: Active)
        CASE
            WHEN distinct_vars_count <= 17 THEN 0 -- Idle
            WHEN distinct_vars_count <= 24 THEN 1 -- Intermediate
            ELSE 2 -- Active
        END AS state_num -- <<-- Added missing END keyword here
    FROM
        DistinctCountPerSecond
),
PeriodStarts AS (
    -- 4. Identify only the moments when the numerical state changes.
    SELECT
        timestamp,
        state_num,
        state_label
    FROM (
        SELECT
            timestamp, state_num, state_label,
            LAG(state_num, 1, -1) OVER (ORDER BY timestamp) AS previous_state_num
        FROM
            InstantaneousStates
    ) AS Subquery
    WHERE
        state_num <> previous_state_num
),
DetailedPeriods AS (
     -- 5. Build the detailed list of periods with durations.
     SELECT
        state_label AS state,
        LEAD(timestamp, 1, '2021-03-18 22:00:00') OVER (ORDER BY timestamp) - timestamp AS duration
     FROM
        PeriodStarts
)
-- FINAL STEP: Aggregate the detailed periods to get the total time for each state.
SELECT
    state,
    SUM(duration) as total_duration
FROM
    DetailedPeriods
GROUP BY
    state;