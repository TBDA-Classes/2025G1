/* ===============================================================
   PURPOSE: List alerts on interesting days, classify by type and
            try to extract a location (zone, conveyor, spindle, axis).
==================================================================*/

WITH params AS (SELECT 30::int AS topN),
days AS (
  SELECT day FROM v_interesting_days
  ORDER BY interesting_score DESC NULLS LAST, day DESC
  LIMIT (SELECT topN FROM params)
),
-- Candidats alertes (string vars contenant ALARM/ALERT/FAULT/ERROR)
alert_vars AS (
  SELECT id, name
  FROM variable
  WHERE datatype ~* 'String'
    AND name ~* '(ALARM|ALERT|FAULT|ERROR)'
),
alerts AS (
  SELECT
    s.ts_utc,
    s.value::text AS msg,
    (s.ts_utc)::date AS day,
    v.name AS var_name
  FROM v_log_string s
  JOIN alert_vars v ON v.id = s.id_var
  JOIN days d ON d.day = s.ts_utc::date
),
classified AS (
  SELECT
    day, ts_utc, var_name, msg,
    CASE
      WHEN msg ~* 'overheat|temp'    THEN 'THERMAL'
      WHEN msg ~* 'power|voltage'    THEN 'POWER'
      WHEN msg ~* 'door|safety'      THEN 'SAFETY'
      WHEN msg ~* 'axis|encoder'     THEN 'MOTION'
      WHEN msg ~* 'spindle'          THEN 'SPINDLE'
      ELSE 'OTHER'
    END AS alert_type,
    -- localisation simple Ã  partir du nom de variable
    COALESCE(
      (regexp_match(var_name, 'ZONE[_ ]?([0-9]+)'))[1],
      (regexp_match(var_name, 'CONVEYOR[_ ]?([0-9]+)'))[1],
      (regexp_match(var_name, 'SPINDLE[_ ]?([0-9]+)'))[1],
      (regexp_match(var_name, 'AXIS[_ ]?([A-Z0-9]+)'))[1]
    ) AS location_token
  FROM alerts
)
SELECT
  day,
  alert_type,
  COALESCE(location_token, 'UNK') AS location,
  COUNT(*) AS events
FROM classified
GROUP BY day, alert_type, location
ORDER BY day, alert_type, location;
